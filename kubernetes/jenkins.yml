apiVersion: v1
kind: ServiceAccount
metadata:
  name: jenkins
  namespace: default
---
# jenkins-clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: jenkins-cluster-role
rules:
  - apiGroups: [ "" ]
    resources: [ "*" ]
    verbs: [ "*" ]
---
# jenkins-clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: jenkins-clusterrolebinding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: jenkins-cluster-role
subjects:
  - kind: ServiceAccount
    name: jenkins
    namespace: default
---
# PV
apiVersion: v1
kind: PersistentVolume
metadata:
  name: jenkins-pv
spec:
  capacity:
    storage: 10Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: /data/jenkins # 로컬 환경에서는 호스트 경로 지정이 필요합니다. 클라우드에서는 NFS나 클라우드 스토리지를 사용할 수 있습니다.

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: jenkins-pvc2
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
---
# Service
apiVersion: v1
kind: Service
metadata:
  name: jenkins-service
spec:
  type: LoadBalancer # 외부 접근을 위해 LoadBalancer 또는 NodePort 사용
  ports:
    - port: 8080
      targetPort: 8080
  selector:
    app: jenkins
---
# Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: jenkins
spec:
  replicas: 1
  selector:
    matchLabels:
      app: jenkins
  template:
    metadata:
      labels:
        app: jenkins
    spec:
      serviceAccountName: jenkins
      containers:
        - name: jenkins
          image: jenkins/jenkins:latest
          imagePullPolicy: IfNotPresent
          resources:
            requests:
              memory: "2Gi"
              cpu: "1"
            limits:
              memory: "4Gi"
              cpu: "2"
          securityContext:
            runAsUser: 0
          ports:
            - containerPort: 8080
          volumeMounts:
            - name: jenkins-storage
              mountPath: /var/jenkins_home
            - name: docker-sock
              mountPath: /var/run/docker.sock
      volumes:
        - name: jenkins-storage
          persistentVolumeClaim:
            claimName: jenkins-pvc2
        - name: docker-sock
          hostPath:
            path: /var/run/docker.sock
            type: Socket